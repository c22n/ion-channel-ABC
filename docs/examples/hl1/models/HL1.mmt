[[model]]
name: Houston2019
desc: """
    Computer model of action potential of HL1-6 myocytes.
    """
author: Charles Houston

#
# Initial values
#
membrane.V = -67.0
ina.m = 0.0
ina.h = 1.0
ina.j = 1.0
ical.d = 0.01
ical.f = 0.99
ical.fCa = 0.99
icat.a = 0.01
icat.r = 0.99
ikr.x = 0.01
#ikr.xs = 0.01
ikr.r = 0.99
ito.a = 0.01
ito.r = 0.99
ikss.a = 0.01
iha.x = 0.01
ryr.P_open = 0.01
calcium_sr.Ca_SRuptake = 800
calcium_sr.Ca_SRrelease = 800
sodium.Na_i = 15e3
potassium.K_i = 120e3
calcium.Ca_i = 0.2
calcium.Ca_sub = 0.2


#
# Simulation engine variables
#
[engine]
time = 0 bind time
pace = 0 bind pace


#
# Physical constants
#
[phys]
F = 96.5 [C/mmol] : Faraday's constant
R = 8.314 [J/mol/K] : Gas constant
T = 296 [K] : Temperature
FoRT = F / (R * T)


#
# Total membrane currents and potential
#
[membrane]
Cm = 13.7 [uF]
dot(V) = -1 * (i_ion + i_stim)
    in [mV]
stim_amplitude = -40 [pA/pF]
i_ion = ical.i_CaL + icat.i_CaT + ikr.i_Kr + ito.i_to + ikss.i_Kss +  ik1.i_k1 + iha.i_ha + ina.i_Na + inab.i_Nab + inak.i_NaK + incx.i_NCX
    in [pA/pF]
i_stim = engine.pace * stim_amplitude
    in [pA/pF]


#
# Cell geometry
#
[cell]
#Acap = 1.38544e-5
#    in [cm^2]
V_cell = 3.5 [pL] : volume of cell
V_sub = 0.01*V_cell : volume of SL subspace compartment
    in [pL]
V_i = 0.46*V_cell - V_sub : volume of remaining intracellular space
    in [pL]
V_SRuptake = 0.0116*V_cell : volume of SR uptake compartment
    in [pL]
V_SRrelease = 0.0012*V_cell : volume of SR release compartment
    in [pL]

#V_SRuptake = 0.9*V_SR : volume of SRuptake compartment
#V_SRrelease = 0.1*V_SR : volume of SRrelease compartment
#r_SR = 6        # radius of SR
#    in [um]
#r_SL = 10.5     # radius of SL
#    in [um]
#V_cell = (4 / 3 * pi * r_SL ^ 3 - 4 / 3 * pi * r_SR ^ 3) / 1000
#    in [pL]


#
# Extracellular concentrations
#
[extra]
Ca_o = 1.8e3 [uM] : Extracellular calcium concentration
K_o  = 4.0e3 [uM] : Extracellular potassium concentration
Na_o = 1.4e5 [uM] : Extracellular sodium concentration


#
# Intracellular sodium concentration
#
[sodium]
use cell.V_cell as V_cell
#use cell.Acap as Acap
use membrane.Cm as Cm
use phys.F as F
use phys.FoRT as FoRT
use extra.Na_o as Na_o

dot(Na_i) = -(ina.i_Na + inab.i_Nab + iha.i_haNa + 3 * incx.i_NCX + 3 * inak.i_NaK) * Cm / (V_cell * F)
    in [uM]
E_Na = 1 / FoRT * log(Na_o / Na_i)
    in [mV]


#
# Intracellular potassium concentration
#
[potassium]
use cell.V_cell as V_cell
#use cell.Acap as Acap
use membrane.Cm as Cm
use phys.F as F
use phys.FoRT as FoRT
use extra.K_o as K_o

dot(K_i) = -(iha.i_haK + ito.i_to + ikss.i_Kss + ik1.i_k1 + ikr.i_Kr - 2 * inak.i_NaK + membrane.i_stim) * Cm / (V_cell * F)
    in [uM]
E_K = 1 / FoRT * log(K_o / K_i)
    in [mV]


#
# INa
#
[ina]
use membrane.V as V
use extra.Na_o as Na_o
use sodium.Na_i as Na_i
use extra.K_o as K_o
use potassium.K_i as K_i
use phys.FoRT as FoRT

g_Na = 1.0 [mS/uF]
g = m^3 * h * j
    in [1]
i_Na = g_Na * g * (V - Erev)
    in [pA/pF]

P_Na = 0.9 [1]
P_K = 1-P_Na
Erev = 1/FoRT * log((P_Na*Na_o + P_K*K_o)/(P_Na*Na_i + P_K*K_i))
    in [mV]

dot(m) = (m_ss - m) / tau_m
    in [1]
tau_m = 1 / (k_1 + k_2)
    in [ms]
m_ss = k_1 * tau_m
    in [1]

dot(h) = (h_ss - h) / tau_h
    in [1]
tau_h = 1 / (k_3 + k_4)
    in [ms]
h_ss = k_4 * tau_h
    in [1]

dot(j) = (h_ss - j) / tau_j
    in [1]
tau_j = A * tau_h
    in [ms]
A = 10 

k_1 = p_1*exp(p_2 * V)
    in [1/ms]
k_2 = p_3*exp(-p_4 * V)
    in [1/ms]
k_3 = p_5*exp(p_6 * V)
    in [1/ms]
k_4 = p_7*exp(-p_8 * V)
    in [1/ms]

p_1 = 1e3 [1/ms]
p_2 = 0.05 [1/mV]
p_3 = 1e1 [1/ms]
p_4 = 0.05 [1/mV]
p_5 = 5e-2 [1/ms]
p_6 = 0.01 [1/mV]
p_7 = 6e-3 [1/ms]
p_8 = 0.05 [1/mV]


#
# ICaL
#
[ical]
use membrane.V as V
use extra.Ca_o as Ca_o
use calcium.Ca_sub as Ca_sub

g_CaL = 0.4 [mS/uF]
g = d*f*fCa
E_CaL = 45 [mV]
i_CaL = g_CaL * g * (V - E_CaL)

dot(d) = (d_ss - d) / tau_d
    in [1]
tau_d = 1 / (k_1 + k_2)
    in [ms]
d_ss = k_1 * tau_d
    in [1]

dot(f) = (f_ss - f) / tau_f
    in [1]
tau_f = 1 / (k_3 + k_4)
    in [ms]
f_ss = k_4 * tau_f
    in [1]

k_1 = p_1*exp(p_2 * V)
    in [1/ms]
k_2 = p_3*exp(-p_4 * V)
    in [1/ms]
k_3 = p_5*exp(p_6 * V)
    in [1/ms]
k_4 = p_7*exp(-p_8 * V)
    in [1/ms]

p_1 = 1e-4 [1/ms]
p_2 = 0.1 [1/mV]
p_3 = 4e-5 [1/ms]
p_4 = 0.05 [1/mV]
p_5 = 5e-2 [1/ms]
p_6 = 0.01 [1/mV]
p_7 = 6e-3 [1/ms]
p_8 = 0.05 [1/mV]

# Calcium-dependent inactivation [Kurata2002]
dot(fCa) = (fCass - fCa)/tau_fCa
    in [1]
Km_fCa = 0.35 [uM]    : ICaL calcium dissociation constant
a_fCa = 0.035 [ms^-1] : ICaL calcium dissociation rate 

fCass = Km_fCa / (Km_fCa + Ca_sub)
tau_fCa = fCass/a_fCa


#
# ICaT
#
[icat]
use membrane.V as V

g_CaT = 1.0 [mS/uF]
E_CaT = 45 [mV]
g = a * r
    in [1]
i_CaT = g_CaT * g * (V - E_CaT)
    in [pA/pF]

dot(a) = (a_ss - a) / tau_a
    in [1]
tau_a = 1 / (k_1 + k_2)
    in [ms]
a_ss = k_1 * tau_a
    in [1]

dot(r) = (r_ss - r) / tau_r
    in [1]
tau_r = 1 / (k_3 + k_4)
    in [ms]
r_ss = k_4 * tau_r
    in [1]

k_1 = p_1*exp(p_2 * V)
    in [1/ms]
k_2 = p_3*exp(-p_4 * V)
    in [1/ms]
k_3 = p_5*exp(p_6 * V)
    in [1/ms]
k_4 = p_7*exp(-p_8 * V)
    in [1/ms]

p_1 = 1e-4 [1/ms]
p_2 = 0.1 [1/mV]
p_3 = 4e-5 [1/ms]
p_4 = 0.05 [1/mV]
p_5 = 5e-2 [1/ms]
p_6 = 0.01 [1/mV]
p_7 = 6e-3 [1/ms]
p_8 = 0.05 [1/mV]


#
# IKr
#
[ikr]
use membrane.V as V
use potassium.E_K as E_K
use extra.K_o as K_o

g_Kr = 0.5 [mS/uF]
g = x * r
    in [1]
i_Kr = g_Kr * sqrt(K_o/5400) * g * (V - E_K)
    in [pA/pF]

dot(x) = (x_ss - x) / tau_x
    in [1]
tau_x = 1 / (k_1 + k_2)
    in [ms]
x_ss = k_1 * tau_x
    in [1]

dot(r) = (r_ss - r) / tau_r
    in [1]
tau_r = 1 / (k_3 + k_4)
    in [ms]
r_ss = k_4 * tau_r
    in [1]

k_1 = p_1*exp(p_2 * V)
    in [1/ms]
k_2 = p_3*exp(-p_4 * V)
    in [1/ms]
k_3 = p_5*exp(p_6 * V)
    in [1/ms]
k_4 = p_7*exp(-p_8 * V)
    in [1/ms]

p_1 = 1e-4 [1/ms]
p_2 = 0.1 [1/mV]
p_3 = 4e-5 [1/ms]
p_4 = 0.05 [1/mV]
p_5 = 5e-2 [1/ms]
p_6 = 0.01 [1/mV]
p_7 = 5e-2 [1/ms]
p_8 = 0.01 [1/mV]


#
# Ito
#
[ito]
use membrane.V as V
use potassium.E_K as E_K

g_to = 0.12375
     in [nS/pF]
g = g_to * a * r
    in [nS/pF]
i_to = g * (V - E_K)
    in [pA/pF]

dot(a) = (a_ss - a) / tau_a
    in [1]
tau_a = 1 / (k_1 + k_2)
    in [ms]
a_ss = k_1 * tau_a
    in [1]

dot(r) = (r_ss - r) / tau_r
    in [1]
tau_r = 1 / (k_3 + k_4)
    in [ms]
r_ss = k_4 * tau_r
    in [1]

k_1 = p_1*exp(p_2 * V)
    in [1/ms]
k_2 = p_3*exp(-p_4 * V)
    in [1/ms]
k_3 = p_5*exp(p_6 * V)
    in [1/ms]
k_4 = p_7*exp(-p_8 * V)
    in [1/ms]

p_1 = 1e-4
    in [1/ms]
p_2 = 0.1 
    in [1/mV]
p_3 = 4e-5
    in [1/ms]
p_4 = 0.05
    in [1/mV]
p_5 = 5e-2
    in [1/ms]
p_6 = 0.01
    in [1/mV]
p_7 = 6e-3
    in [1/ms]
p_8 = 0.05
    in [1/mV]


#
# IKss
#
[ikss]
use membrane.V as V
use potassium.E_K as E_K

g_Kss = 0.12375
     in [nS/pF]
g = g_Kss * a
    in [nS/pF]
i_Kss = g * (V - E_K)
    in [pA/pF]

dot(a) = (a_ss - a) / tau_a
    in [1]
tau_a = 1 / (k_1 + k_2)
    in [ms]
a_ss = k_1 * tau_a
    in [1]

k_1 = p_1*exp(p_2 * V)
    in [1/ms]
k_2 = p_3*exp(-p_4 * V)
    in [1/ms]

p_1 = 1e-4
    in [1/ms]
p_2 = 0.1 
    in [1/mV]
p_3 = 4e-5
    in [1/ms]
p_4 = 0.05
    in [1/mV]


#
# Iha
#
[iha]
use membrane.V as V
use sodium.E_Na as E_Na
use potassium.E_K as E_K

g_ha = 0.021
    in [mS/uF]
g = g_ha * x
    in [mS/uF]
i_haNa = g * k_haNa * (V - E_Na)
    in [pA/pF]
i_haK = g * (1-k_haNa) * (V - E_K)
    in [pA/pF]
i_ha = i_haNa + i_haK
    in [pA/pF]

k_haNa = 0.2
    in [1]

dot(x) = (x_ss - x) / tau_x
    in [1]
tau_x = 1 / (k_1 + k_2)
    in [ms]
x_ss = k_2 * tau_x
    in [1]

k_1 = p_1*exp(p_2 * V)
    in [1/ms]
k_2 = p_3*exp(-p_4 * V)
    in [1/ms]

p_1 = 1e-4
    in [1/ms]
p_2 = 0.1 
    in [1/mV]
p_3 = 4e-5
    in [1/ms]
p_4 = 0.05
    in [1/mV]


#
# IK1
#
[ik1]
use membrane.V as V
use potassium.E_K as E_K
use extra.K_o as K_o

g_k1 = 0.021
    in [mS/uF]
g = g_k1 * x_ss
    in [mS/uF]
i_k1 = g * sqrt(K_o/5400) * (V - E_K)
    in [pA/pF]

x_ss = k_2 / (k_1 + k_2)
    in [1]

k_1 = p_1*exp(p_2 * V)
    in [1/ms]
k_2 = p_3*exp(-p_4 * V)
    in [1/ms]

p_1 = 1e-4
    in [1/ms]
p_2 = 0.1 
    in [1/mV]
p_3 = 4e-5
    in [1/ms]
p_4 = 0.05
    in [1/mV]


#
# INCX 
# ref: [Korhonen2009]
#
[incx]
use extra.Na_o as Na_o
use extra.Ca_o as Ca_o
use calcium.Ca_sub as Ca_sub
use membrane.V as V
use sodium.Na_i as Na_i

k_NCX = 2.268 # scaling factor
    in [pA/pF/uM^4]
d_NCX = 1e-16 # denominator constant
    in [uM^-4]
gamma = 0.5 # energy barrier
    in [1]

i_NCX = k_NCX * 1e-16 * (Na_i ^ 3 * Ca_o * exp(0.03743 * gamma * V) - Na_o ^ 3 * Ca_sub * exp(0.03743 * (gamma - 1) * V)) / (1 + d_NCX * (Na_o ^ 3 * Ca_sub + Na_i ^ 3 * Ca_o))


#
# INaK 
# ref: [Korhonen2009]
#
[inak]
use membrane.V as V
use phys.FoRT as FoRT
use sodium.Na_i as Na_i
use extra.K_o as K_o
use extra.Na_o as Na_o

i_NaK_max = 2.7         # maximum current amplitude
    in [pA/pF]
n_NaK = 3.2             # hill coefficient for Na+
    in [1]
Km_Nai = 18600          # Na+ half saturation constant
    in [uM]
Km_Ko = 1500            # K+ half saturation constant
    in [uM]

f_NaK = (1 + 0.1245 * exp(-0.1 * V * FoRT) + 0.0365 * sigma * exp(-V * FoRT)) ^ (-1)
    in [1]
sigma = 1 / 7 * (exp(Na_o / 67300 [uM]) - 1)
    in [1]

i_NaK = i_NaK_max * f_NaK * (1 + (Km_Nai / Na_i) ^ n_NaK) ^ (-1) * (1 + (Km_Ko / K_o)) ^ (-1)
    in [pA/pF]


#
# INab
#
[inab]
use membrane.V as V
use sodium.E_Na as E_Na

g_Nab = 0.0026
    in [mS/uF]
i_Nab = g_Nab * (V - E_Na)
    in [pA/pF]


#
# Ryanodine receptors
# ref: [Korhonen2009]
#
[ryr]
use calcium_sr.Ca_SRrelease as Ca_SRrelease
use calcium.Ca_sub as Ca_sub

k_RyR = 0.01 [1/ms]   : scaling factor for RyR flux
k_open = 1 [1/ms]     : rate constant for RyR opening
k_close = 0.16 [1/ms] : rate constant for RyR closing
j_1 = 3.51
j_2 = 530 [uM]
j_3 = 200 [uM]
j_4 = 0.25

J_RyR = k_RyR * P_open * (Ca_SRrelease - Ca_sub)
    in [uM/ms]
K_mRyR = j_1 * (1 + exp((Ca_SRrelease - j_2) / j_3)) ^ (-1) + j_4
    in [uM]
P_closed = 1 - P_open
dot(P_open) = P_closed * k_open * Ca_sub ^ 4 / (K_mRyR ^ 4 + Ca_sub ^ 4) - k_close * P_open


#
# SR SERCA pump
# ref: [Korhonen2009]
#
[serca]
use calcium.Ca_i as Ca_i
use calcium_sr.Ca_SRuptake as Ca_SRuptake

V_max = 0.9996 [uM/ms] : maxmimum SERCA flux
K_mf = 0.5 [uM]        : half-saturation for forward SERCA
K_mr = 7000*K_mf       : half-saturation for reverse SERCA
H = 2                  : Hill coefficient for SERCA

J_SERCA = (V_max * (Ca_i / K_mf) ^ H - V_max * (Ca_SRuptake / K_mr) ^ H) / (1 + (Ca_i / K_mf) ^ H + (Ca_SRuptake / K_mr) ^ H)
    in [uM/ms]


#
# SR calcium leak flux
# ref: [Korhonen2009]
#
[leak]
use calcium_sr.Ca_SRuptake as Ca_SRuptake
use calcium.Ca_i as Ca_i

k_leak = 5e-6 [1/ms] : SR leak rate constant

J_leak = k_leak * (Ca_SRuptake - Ca_i)
    in [uM/ms]


#
# Calcium diffusion between SR uptake and release compartments
# ref: [Korhonen2009]
#
[tr]
use calcium_sr.Ca_SRuptake as Ca_SRuptake
use calcium_sr.Ca_SRrelease as Ca_SRrelease

tau_tr = 100 [ms] : time constant for J_tr

J_tr = (Ca_SRuptake - Ca_SRrelease) / tau_tr
    in [uM/ms]

#
# Calcium diffusion from subspace to cytoplasm
# ref: [Kurata2002]
#
[diff]
use calcium.Ca_sub as Ca_sub
use calcium.Ca_i as Ca_i

tau_diff = 0.04 [ms] : time constant for J_diff 

J_diff = (Ca_sub - Ca_i) / tau_diff
    in [uM/ms]


#
# Calcium buffering [Korhonen2009]
#
[calcium_buffers]
# Cystolic
Km_TRPN = 0.5 [uM] : half-saturation for troponin
TRPN_tot = 35 [uM] : total troponin concentration
Km_CMDN = 2.38 [uM] : half-saturation for calmodulin
CMDN_tot = 50 [uM]  : total calmodulin concentration

# SR
Km_CSQN = 800 [uM]    : half-saturation for calsequestrin
CSQN_tot = 24750 [uM] : total calsquestrin concentration


#
# Calcium concentration in SR
# ref: [Kurata2002,Korhonen2009]
#
[calcium_sr]
use calcium_buffers.CSQN_tot as CSQN_tot
use calcium_buffers.Km_CSQN as Km_CSQN
#use cell.V_SR as V_SR
use cell.V_SRuptake as V_SRuptake
use cell.V_SRrelease as V_SRrelease
use serca.J_SERCA as J_SERCA
use leak.J_leak as J_leak
use tr.J_tr as J_tr
use ryr.J_RyR as J_RyR

dot(Ca_SRuptake) = J_SERCA - J_leak - J_tr * V_SRrelease/V_SRuptake
    in [uM]
beta_SRrelease = (1 + CSQN_tot*Km_CSQN/((Ca_SRrelease + Km_CSQN)^2))^(-1)
dot(Ca_SRrelease) = beta_SRrelease * (-J_RyR + J_tr)
    in [uM]


#
# Intracellular calcium concentration
# ref: [Kurata2002,Korhonen2009]
#
[calcium]
use cell.V_i as V_i
use cell.V_sub as V_sub
use cell.V_SRuptake as V_SRuptake
use cell.V_SRrelease as V_SRrelease
#use cell.Acap as Acap
use membrane.Cm as Cm
use phys.F as F
use phys.FoRT as FoRT
use calcium_buffers.Km_TRPN as Km_TRPN
use calcium_buffers.TRPN_tot as TRPN_tot
use calcium_buffers.Km_CMDN as Km_CMDN
use calcium_buffers.CMDN_tot as CMDN_tot
use ryr.J_RyR as J_RyR
use serca.J_SERCA as J_SERCA
use leak.J_leak as J_leak
use diff.J_diff as J_diff
use incx.i_NCX as i_NCX
use ical.i_CaL as i_CaL
use icat.i_CaT as i_CaT
use extra.Ca_o as Ca_o

beta_i = (1 + TRPN_tot*Km_TRPN/((Ca_i + Km_TRPN)^2) + CMDN_tot*Km_CMDN/((Ca_i + Km_CMDN)^2))^(-1)
beta_subSL = (1 + TRPN_tot*Km_TRPN/((Ca_sub + Km_TRPN)^2) + CMDN_tot*Km_CMDN/((Ca_sub + Km_CMDN)^2))^(-1)

dot(Ca_i) = beta_i * (J_diff*V_sub - (J_SERCA-J_leak)*V_SRuptake)/V_i
dot(Ca_sub) = beta_subSL * ((((-(i_CaL + i_CaT - 2 * i_NCX))*Cm)/(2*F) + J_RyR*V_SRrelease)/V_sub - J_diff)

E_Ca = 1/(2*FoRT) * log(Ca_o/Ca_sub)

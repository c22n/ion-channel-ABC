[[model]]
author: Charles Houston
desc: """
    Computer model of action potential of HL1-6 myocytes.
    """
name: hl1

# Functions
j(i, r_SR, dr) = (r_SR + (i-0.5)*dr)/dr
beta(c, Buf_tot, Km_Buf) = (1 + (Buf_tot*Km_Buf)/((c + Km_Buf)^2))^(-1)
cdot(cp, c, cn, j, dr, Buf_tot, Km_Buf) = beta(c, Buf_tot, Km_Buf) * ((D_Ca/j*dr^2) * ((j+1)*cn - 2*j*c + (j-1)*cp))

# Initial values
membrane.V = -67.0

ina.m = 0.01
ina.h = 0.99

ical.d = 0.01
ical.f = 0.99
ical.fCa = 0.99

icat.a = 0.01
icat.r = 0.99

ikr.xf = 0.01
ikr.xs = 0.01
ikr.r = 0.99

ito.a = 0.01
ito.r = 0.99

ikss.a = 0.01

iha.x = 0.01

ryr.P_open = 0.012001999999999999
ca_conc_sr.Ca_SRuptake = 787.180644
ca_conc_sr.Ca_SRrelease = 776.6058415
ca_conc.Ca_i = 0.215237
na_conc.Na_i = 15558.639856999998
k_conc.K_i = 120499.57624000001


[environment]
time = 0 bind time
    in [ms]


[membrane]
Ca_o = 1800
    in [uM]
K_o = 4e3
    in [uM]
Na_o = 1.4e5
     in [uM]
Cm = 1.0   #13.7
    in [uF/cm^2]
F = 96.5
    in [C/mmol]
R = 8.314
    in [J/mol/K]
T = 305
    in [K]
FoRT = F / (R * T)
    in [1/mV]

dot(V) = -(ical.i_CaL + incx.i_NCX + icab.i_Cab + ipca.i_pCa + ina.i_Na + inab.i_Nab + inak.i_NaK + ito.i_to + ik1.i_K1 + ikur.i_Kss + ikr.i_Kr + icat.i_CaT + iha.i_ha - i_stim) / Cm
    in [mV]
i_stim = 0.0
    in [pA/pF]

pi = 3.14159265358979323846
    in [1]
Acap = 1.38544e-5
    in [cm^2]
r_SR = 6        # radius of SR
    in [um]
r_SL = 10.5     # radius of SL
    in [um]
V_myo = (4 / 3 * pi * r_SL ^ 3 - 4 / 3 * pi * r_SR ^ 3) / 1000
    in [pL]


# Intracellular sodium concentration
[na_conc]
use membrane.V_myo as V_myo
use membrane.Acap as Acap
use membrane.Cm as Cm
use membrane.F as F
use membrane.FoRT as FoRT
use membrane.Na_o as Na_o

dot(Na_i) = -(ina.i_Na + inab.i_Nab + iha.i_haNa + 3 * incx.i_NCX + 3 * inak.i_NaK) * Acap * Cm / (V_myo * F * 1e-6)
    in [uM]
E_Na = 1 / FoRT * log(Na_o / Na_i)
    in [mV]


# Intracellular potassium concentration
[k_conc]
use membrane.V_myo as V_myo
use membrane.Acap as Acap
use membrane.Cm as Cm
use membrane.F as F
use membrane.FoRT as FoRT
use membrane.K_o as K_o

dot(K_i) = -(iha.i_haK + ito.i_to + ik1.i_K1 + ikr.i_Kr - 2 * inak.i_NaK + membrane.i_stim) * Acap * Cm / (V_myo * F * 1e-6)
    in [uM]
E_K = 1 / FoRT * log(K_o / K_i)
    in [mV]


# Fast sodium current
[ina]
use membrane.V as V
use membrane.Na_o as Na_o
use na_conc.Na_i as Na_i
use membrane.K_o as K_o
use k_conc.K_i as K_i
use membrane.FoRT as FoRT

g_Na = 1.0
    in [mS/uF]
g = m^3 * h
    in [1]
i_Na = g_Na * g * (V - Erev)
    in [pA/pF]

P_Na = 0.9
    in [1]
P_K = 1 - P_Na
    in [1]
Erev = 1/FoRT * log((P_Na*Na_o + P_K*K_o)/(P_Na*Na_i + P_K*K_i))
    in [mV]

dot(m) = (m_ss - m) / tau_m
    in [1]
tau_m = 1 / (k_1 + k_2)
    in [ms]
m_ss = k_1 * tau_m
    in [1]

dot(h) = (h_ss - h) / tau_h
    in [1]
tau_h = 1 / (k_3 + k_4)
    in [ms]
h_ss = k_4 * tau_h
    in [1]

k_1 = p_1*exp(p_2 * V)
    in [1/ms]
k_2 = p_3*exp(-p_4 * V)
    in [1/ms]
k_3 = p_5*exp(p_6 * V)
    in [1/ms]
k_4 = p_7*exp(-p_8 * V)
    in [1/ms]

p_1 = 1e-4
    in [1/ms]
p_2 = 0.1 
    in [1/mV]
p_3 = 4e-5
    in [1/ms]
p_4 = 0.05
    in [1/mV]
p_5 = 5e-2
    in [1/ms]
p_6 = 0.01
    in [1/mV]
p_7 = 6e-3
    in [1/ms]
p_8 = 0.05
    in [1/mV]


# L-type Calcium current
[ical]
use membrane.V as V
use membrane.Ca_o as Ca_o
use ca_conc.Ca_i as Ca_i
use membrane.FoRT as FoRT
use membrane.F as F

P_CaL = 1e-3
    in [m/s]
g = d * f * fCa
    in [1]
driving = if(V != 0,
    4*V*FoRT*F*(Ca_i-gamma_Ca_o*Ca_o*exp(-2*V*FoRT))/(1-exp(-2*V*FoRT)),
    2*F*(Ca_i-gamma_Ca_o*Ca_o))
    in [pA/pF]
i_CaL = P_CaL * g * driving
    in [pA/pF]
gamma_Ca_o = 1.0
    in [1]

dot(d) = (d_ss - d) / tau_d
    in [1]
tau_d = 1 / (k_1 + k_2)
    in [ms]
d_ss = k_1 * tau_d
    in [1]

dot(f) = (f_ss - f) / tau_f
    in [1]
tau_f = 1 / (k_3 + k_4)
    in [ms]
f_ss = k_4 * tau_f
    in [1]

k_1 = p_1*exp(p_2 * V)
    in [1/ms]
k_2 = p_3*exp(-p_4 * V)
    in [1/ms]
k_3 = p_5*exp(p_6 * V)
    in [1/ms]
k_4 = p_7*exp(-p_8 * V)
    in [1/ms]

p_1 = 1e-4
    in [1/ms]
p_2 = 0.1 
    in [1/mV]
p_3 = 4e-5
    in [1/ms]
p_4 = 0.05
    in [1/mV]
p_5 = 5e-2
    in [1/ms]
p_6 = 0.01
    in [1/mV]
p_7 = 6e-3
    in [1/ms]
p_8 = 0.05
    in [1/mV]

dot(fCa) = k*((fCass - fCa)/tau_fCa)
    in [1]
k = if(fCa > f, if(V > -60, 0, 1), 1)
    in [1]
alphafCa = (1 + (Ca_i/0.325)^8)^(-1)
    in [1]
betafCa = 0.1 * (1 + exp((Ca_i-0.5)/0.1))^(-1)
    in [1]
gammafCa = 0.2 * (1 + exp((Ca_i-0.75)/0.8))^(-1)
    in [1]
fCass = (alphafCa+betafCa+gammafCa+0.23)/1.46
    in [1]
tau_fCa = 2
    in [ms]


# T-type Calcium current
[icat]
use membrane.V as V
use ca_conc.E_Ca as E_Ca

g_CaT = 1.0
    in [mS/uF]
E_Ca_offset = 40.0
    in [mV]
g = a * r
    in [1]
i_CaT = g_CaT * g * (V - E_Ca + E_Ca_offset)
    in [pA/pF]

dot(a) = (a_ss - a) / tau_a
    in [1]
tau_a = 1 / (k_1 + k_2)
    in [ms]
a_ss = k_1 * tau_a
    in [1]

dot(r) = (r_ss - r) / tau_r
    in [1]
tau_r = 1 / (k_3 + k_4)
    in [ms]
r_ss = k_4 * tau_r
    in [1]

k_1 = p_1*exp(p_2 * V)
    in [1/ms]
k_2 = p_3*exp(-p_4 * V)
    in [1/ms]
k_3 = p_5*exp(p_6 * V)
    in [1/ms]
k_4 = p_7*exp(-p_8 * V)
    in [1/ms]

p_1 = 1e-4
    in [1/ms]
p_2 = 0.1 
    in [1/mV]
p_3 = 4e-5
    in [1/ms]
p_4 = 0.05
    in [1/mV]
p_5 = 5e-2
    in [1/ms]
p_6 = 0.01
    in [1/mV]
p_7 = 6e-3
    in [1/ms]
p_8 = 0.05
    in [1/mV]


# Rapidly-activating delayed rectifier Potassium current
[ikr]
use membrane.V as V
use k_conc.E_K as E_K
use membrane.K_o as K_o

g_Kr = 0.5
    in [mS/uF]
x = Arel * xf + (1-Arel) * xs
    in [1]
g = sqrt(K_o/5400) * x * r
    in [1]
i_Kr = g_Kr * g * (V - E_K)
    in [pA/pF]

dot(xf) = (xf_ss - xf) / tau_xf
    in [1]
tau_xf = 1 / (k_1 + k_2)
    in [ms]
xf_ss = k_1 * tau_xf
    in [1]

dot(xs) = (xs_ss - xs) / tau_xs
    in [1]
tau_xs = 1 / (k_3 + k_4)
    in [ms]
xs_ss = k_3 * tau_xs
    in [1]

dot(r) = (r_ss - r) / tau_r
    in [1]
tau_r = 1 / (k_5 + k_6)
    in [ms]
r_ss = k_6 * tau_r
    in [1]

k_1 = p_1*exp(p_2 * V)
    in [1/ms]
k_2 = p_3*exp(-p_4 * V)
    in [1/ms]
k_3 = p_5*exp(p_6 * V)
    in [1/ms]
k_4 = p_7*exp(-p_8 * V)
    in [1/ms]

k_5 = p_9*exp(p_10 * V)
    in [1/ms]
k_6 = p_11*exp(-p_12 * V)
    in [1/ms]

# Model relative amplitude of fast and slow time constant
# using Boltzmann curve
Arel = (1 + exp(s_A*(h_A+V)))^(-1)
    in [1]
s_A = 0.2
    in [1]
h_A = -20
    in [mV]

p_1 = 1e-4
    in [1/ms]
p_2 = 0.1 
    in [1/mV]
p_3 = 4e-5
    in [1/ms]
p_4 = 0.05
    in [1/mV]
p_5 = 1e-4
    in [1/ms]
p_6 = 0.1 
    in [1/mV]
# from equal steady-state activation gate
# p_2+p_4==p_6+p_8
# log(p_1)+log(p_3)==log(p_5)+log(p_7)
p_7 = p_3*p_5/p_1     # from equal steady-state activation
    in [1/ms]
p_8 = p_2+p_4-p_6     # from equal steady-state activation
    in [1/mV]

p_9 = 5e-2
    in [1/ms]
p_10 = 0.01
    in [1/mV]
p_11 = 6e-3
    in [1/ms]
p_12 = 0.05
    in [1/mV]


# Transient-outward Potassium current
[ito]
use membrane.V as V
use k_conc.E_K as E_K

g_to = 0.12375
     in [nS/pF]
g = g_to * a * r
    in [nS/pF]
i_to = g * (V - E_K)
    in [pA/pF]

dot(a) = (a_ss - a) / tau_a
    in [1]
tau_a = 1 / (k_1 + k_2)
    in [ms]
a_ss = k_1 * tau_a
    in [1]

dot(r) = (r_ss - r) / tau_r
    in [1]
tau_r = 1 / (k_3 + k_4)
    in [ms]
r_ss = k_4 * tau_r
    in [1]

k_1 = p_1*exp(p_2 * V)
    in [1/ms]
k_2 = p_3*exp(-p_4 * V)
    in [1/ms]
k_3 = p_5*exp(p_6 * V)
    in [1/ms]
k_4 = p_7*exp(-p_8 * V)
    in [1/ms]

p_1 = 1e-4
    in [1/ms]
p_2 = 0.1 
    in [1/mV]
p_3 = 4e-5
    in [1/ms]
p_4 = 0.05
    in [1/mV]
p_5 = 5e-2
    in [1/ms]
p_6 = 0.01
    in [1/mV]
p_7 = 6e-3
    in [1/ms]
p_8 = 0.05
    in [1/mV]


# Steady-state non-inactivating Potassium current
[ikss]
use membrane.V as V
use k_conc.E_K as E_K

g_Kss = 0.12375
     in [nS/pF]
g = g_Kss * a
    in [nS/pF]
i_Kss = g * (V - E_K)
    in [pA/pF]

dot(a) = (a_ss - a) / tau_a
    in [1]
tau_a = 1 / (k_1 + k_2)
    in [ms]
a_ss = k_1 * tau_a
    in [1]

k_1 = p_1*exp(p_2 * V)
    in [1/ms]
k_2 = p_3*exp(-p_4 * V)
    in [1/ms]

p_1 = 1e-4
    in [1/ms]
p_2 = 0.1 
    in [1/mV]
p_3 = 4e-5
    in [1/ms]
p_4 = 0.05
    in [1/mV]


# Hyperpolarisation-activated non-selective cation current (`funny')
[iha]
use membrane.V as V
use na_conc.E_Na as E_Na
use k_conc.E_K as E_K

g_ha = 0.021
    in [mS/uF]
g = g_ha * x
    in [mS/uF]
i_haNa = g * k_haNa * (V - E_Na)
    in [pA/pF]
i_haK = g * (1-k_haNa) * (V - E_K)
    in [pA/pF]
i_ha = i_haNa + i_haK
    in [pA/pF]

k_haNa = 0.2
    in [1]

dot(x) = (x_ss - x) / tau_x
    in [1]
tau_x = 1 / (k_1 + k_2)
    in [ms]
x_ss = k_2 * tau_x
    in [1]

k_1 = p_1*exp(p_2 * V)
    in [1/ms]
k_2 = p_3*exp(-p_4 * V)
    in [1/ms]

p_1 = 1e-4
    in [1/ms]
p_2 = 0.1 
    in [1/mV]
p_3 = 4e-5
    in [1/ms]
p_4 = 0.05
    in [1/mV]


# Inward rectifying Potassium current
[ik1]
use membrane.V as V
use k_conc.E_K as E_K
use membrane.K_o as K_o

g_k1 = 0.021
    in [mS/uF]
g = g_k1 * x_ss
    in [mS/uF]
i_k1 = g * sqrt(K_o/5400) * (V - E_K)
    in [pA/pF]

x_ss = k_2 / (k_1 + k_2) #k_2 * tau_x
    in [1]

k_1 = p_1*exp(p_2 * V)
    in [1/ms]
k_2 = p_3*exp(-p_4 * V)
    in [1/ms]

p_1 = 1e-4
    in [1/ms]
p_2 = 0.1 
    in [1/mV]
p_3 = 4e-5
    in [1/ms]
p_4 = 0.05
    in [1/mV]


# Na+/Ca2+ exchanger current - Korhonen et al. (2009)
[incx]
use membrane.Na_o as Na_o
use membrane.Ca_o as Ca_o
use ca_conc.Ca_subSL as Ca_subSL
use membrane.V as V
use na_conc.Na_i as Na_i

k_NCX = 2.268 # scaling factor
    in [pA/pF/uM^4]
d_NCX = 1e-16 # denominator constant
    in [uM^-4]
gamma = 0.5 # energy barrier
    in [1]

i_NCX = k_NCX * 1e-16 * (Na_i ^ 3 * Ca_o * exp(0.03743 * gamma * V) - Na_o ^ 3 * Ca_subSL * exp(0.03743 * (gamma - 1) * V)) / (1 + d_NCX * (Na_o ^ 3 * Ca_subSL + Na_i ^ 3 * Ca_o))


# Na+/K+ ATPase - Korhonen et al. (2009)
[inak]
use membrane.V as V
use membrane.FoRT as FoRT
use na_conc.Na_i as Na_i
use membrane.K_o as K_o
use membrane.Na_o as Na_o

i_NaK_max = 2.7         # maximum current amplitude
    in [pA/pF]
n_NaK = 3.2             # hill coefficient for Na+
    in [1]
Km_Nai = 18600          # Na+ half saturation constant
    in [uM]
Km_Ko = 1500            # K+ half saturation constant
    in [uM]

f_NaK = (1 + 0.1245 * exp(-0.1 * V * FoRT) + 0.0365 * sigma * exp(-V * FoRT)) ^ (-1)
    in [1]
sigma = 1 / 7 * (exp(Na_o / 67300 [uM]) - 1)
    in [1]

i_NaK = i_NaK_max * f_NaK * (1 + (Km_Nai / Na_i) ^ n_NaK) ^ (-1) * (1 + (Km_Ko / K_o)) ^ (-1)
    in [pA/pF]


# Calcium SL pump current
[ipca]
use ca_conc.Ca_i as Ca_i

g_pCa = 0.025 [nS/pF]
Km_pCa = 0.5 [uM]
i_pCa = g_pCa * Ca_i / (Km_pCa + Ca_i)


# Calcium background current
[icab]
use membrane.V as V
use ca_conc.E_Ca as E_Ca

g_Cab = 0.0008
  in [mS/uF]
i_Cab = g_Cab * (V - E_Ca)
  in [pA/pF]


# Background sodium current
[inab]
use membrane.V as V
use na_conc.E_Na as E_Na

g_Nab = 0.0026
    in [mS/uF]
i_Nab = g_Nab * (V - E_Na)
    in [pA/pF]


# Calcium handling processes Korhonen et al (2009)
[ryr]
k_RyR = 0.01        # scaling factor for J_RyR
    in [1/ms]
k_open = 1          # rate constant for RyR opening
    in [1/ms]
k_close = 0.16      # rate constant for RyR closing
    in  [1/ms]
j_1 = 3.51
    in [1]
j_2 = 530
    in [uM]
j_3 = 200
    in [uM]
j_4 = 0.25
    in [1]

J_RyR = k_RyR * P_open * (ca_conc_sr.Ca_SRrelease - ca_conc.Ca_subSR)
    in [uM/ms]
K_mRyR = j_1 * (1 + exp((ca_conc_sr.Ca_SRrelease - j_2) / j_3)) ^ (-1) + j_4
    in [uM]
P_closed = 1 - P_open
    in [1]

dot(P_open) = P_closed * k_open * ca_conc.Ca_subSR ^ 4 / (K_mRyR ^ 4 + ca_conc.Ca_subSR ^ 4) - k_close * P_open
    in [1]


[serca]
V_max = 0.9996      # maximum SERCA calcium_fluxes
    in [uM/ms]
K_mf = 0.5          # half-saturation for forward SERCA
    in [uM]
K_mr = 7000 * K_mf  # half-saturation for reverse SERCA
    in [uM]
H = 2               # hill coefficient for SERCA
    in [1]

J_SERCA = (V_max * (ca_conc.Ca_subSR / K_mf) ^ H - V_max * (ca_conc_sr.Ca_SRuptake / K_mr) ^ H) / (1 + (ca_conc.Ca_subSR / K_mf) ^ H + (ca_conc_sr.Ca_SRuptake / K_mr) ^ H)
    in [uM/ms]


[jleak]
k_leak = 5e-6       # SR leak rate constant
    in [1/ms]

J_leak = k_leak * (ca_conc_sr.Ca_SRuptake - ca_conc.Ca_subSR)
    in [uM/ms]


[ca_diff]
tau_tr = 100        # time constant for J_tr
    in [ms]

J_tr = (ca_conc_sr.Ca_SRuptake - ca_conc_sr.Ca_SRrelease) / tau_tr
    in [uM/ms]


[ca_conc_sr]
Buf_tot = 24750        # total SR Ca2+ buffer concentration
    in [uM]
Km_Buf = 800           # half-saturation for SR Ca2+ buffer
    in [uM]
V_SR = 0.0903          # volume of SR
    in [pL]
V_SRuptake = 0.9*V_SR  # volume of SRuptake compartment
    in [pL]
V_SRrelease = 0.1*V_SR # volume of SRrelease compartment
    in [pL]

dot(Ca_SRuptake) = (serca.J_SERCA - jleak.J_leak - ca_diff.J_tr) / V_SRuptake
    in [uM]
dot(Ca_SRrelease) = beta(Ca_SRrelease, Buf_tot, Km_Buf) * (-ryanodine_receptors.J_RyR + ca_diff.J_tr) / V_SRrelease
    in [uM]

Ca_SR = (Ca_SRuptake * V_SRuptake + Ca_SRrelease * V_SRrelease) / (V_SRuptake + V_SRrelease)
    in [uM]


[ca_conc]
use membrane.pi as pi
use membrane.FoRT as FoRT
use membrane.Ca_o as Ca_o
use membrane.Acap as Acap
use membrane.Cm as Cm
use membrane.F as F
use membrane.V_myo as V_myo
use membrane.r_SR as r_SR
use membrane.r_SL as r_SL

# Simplified cytosolic buffering
Buf_tot = 85    # cytosolic buffer concentration
    in [uM]
Km_Buf = 1.5    # cytosolic buffer half-saturation constant
    in [uM]

# Korhonen buffer settings below
#K_mTRPN = 0.5   # half-saturation for troponin
#    in [uM]
#TRPN_tot = 35   # total troponin concentration
#    in [uM]
#K_mCMDN = 2.38  # half-saturation for calmodulin
#    in [uM]
#CMDN_tot = 50   # total calmodulin concentration
#    in [uM]

D_Ca = 7        # calcium diffusion coefficient 
    in [um^2/ms]

J_CaSR = ryanodine_receptors.J_RyR - serca.J_SERCA + jleak.J_leak
    in [uM/ms]
J_CaSL = (2 * incx.i_NCX - ical.i_CaL - icat.i_CaT - icab.i_Cab) * Acap * Cm / (2 * F * 1e-6)
    in [uM/ms]

# Spatial coordinates for Ca2+ diffusion from SR -> SL (a = 45)
# PDE solves as system of ODEs
dr = 0.1 [um]

V_subSR = 4/3*pi*((r_SR+dr)^3 - r_SR^3) * 1e-3 [pl/fl]
V_subSL = 4/3*pi*(r_SL^3 - (r_SL-dr)^3) * 1e-3 [pl/fl]

# n = 1
j1 = j(1, r_SR, dr) [1]
dot(c1) = beta(c1, Buf_tot, Km_Buf) * ((D_Ca/j1*dr^2) * ((j1+1)*c2 - 2*j1*c1 + (j1-1)*c1) + J_CaSR/V_subSR)

# n = 2,3,4,...,a-1(=44)
j2 = j(2, r_SR, dr) [1]
dot(c2) = cdot(c1, c2, c3, j2, dr, Buf_tot, Km_Buf, D_Ca)
j3 = j(3, r_SR, dr) [1]
dot(c3) = cdot(c2, c3, c4, j3, dr, Buf_tot, Km_Buf, D_Ca)
j4 = j(4, r_SR, dr) [1]
dot(c4) = cdot(c3, c4, c5, j4, dr, Buf_tot, Km_Buf, D_Ca)
j5 = j(5, r_SR, dr) [1]
dot(c5) = cdot(c4, c5, c6, j5, dr, Buf_tot, Km_Buf, D_Ca)
j6 = j(6, r_SR, dr) [1]
dot(c6) = cdot(c5, c6, c7, j6, dr, Buf_tot, Km_Buf, D_Ca)
j7 = j(7, r_SR, dr) [1]
dot(c7) = cdot(c6, c7, c8, j7, dr, Buf_tot, Km_Buf, D_Ca)
j8 = j(8, r_SR, dr) [1]
dot(c8) = cdot(c7, c8, c9, j8, dr, Buf_tot, Km_Buf, D_Ca)
j9 = j(9, r_SR, dr) [1]
dot(c9) = cdot(c8, c9, c10, j9, dr, Buf_tot, Km_Buf, D_Ca)
j10 = j(10, r_SR, dr) [1]
dot(c10) = cdot(c9, c10, c11, j10, dr, Buf_tot, Km_Buf, D_Ca)
j11 = j(11, r_SR, dr) [1]
dot(c11) = cdot(c10, c11, c12, j11, dr, Buf_tot, Km_Buf, D_Ca)
j12 = j(12, r_SR, dr) [1]
dot(c12) = cdot(c11, c12, c13, j12, dr, Buf_tot, Km_Buf, D_Ca)
j13 = j(13, r_SR, dr) [1]
dot(c13) = cdot(c12, c13, c14, j13, dr, Buf_tot, Km_Buf, D_Ca)
j14 = j(14, r_SR, dr) [1]
dot(c14) = cdot(c13, c14, c15, j14, dr, Buf_tot, Km_Buf, D_Ca)
j15 = j(15, r_SR, dr) [1]
dot(c15) = cdot(c14, c15, c16, j15, dr, Buf_tot, Km_Buf, D_Ca)
j16 = j(16, r_SR, dr) [1]
dot(c16) = cdot(c15, c16, c17, j16, dr, Buf_tot, Km_Buf, D_Ca)
j17 = j(17, r_SR, dr) [1]
dot(c17) = cdot(c16, c17, c18, j17, dr, Buf_tot, Km_Buf, D_Ca)
j18 = j(18, r_SR, dr) [1]
dot(c18) = cdot(c17, c18, c19, j18, dr, Buf_tot, Km_Buf, D_Ca)
j19 = j(19, r_SR, dr) [1]
dot(c19) = cdot(c18, c19, c20, j19, dr, Buf_tot, Km_Buf, D_Ca)
j20 = j(20, r_SR, dr) [1]
dot(c20) = cdot(c19, c20, c21, j20, dr, Buf_tot, Km_Buf, D_Ca)
j21 = j(21, r_SR, dr) [1]
dot(c21) = cdot(c20, c21, c22, j21, dr, Buf_tot, Km_Buf, D_Ca)
j22 = j(22, r_SR, dr) [1]
dot(c22) = cdot(c21, c22, c23, j22, dr, Buf_tot, Km_Buf, D_Ca)
j23 = j(23, r_SR, dr) [1]
dot(c23) = cdot(c22, c23, c24, j23, dr, Buf_tot, Km_Buf, D_Ca)
j24 = j(24, r_SR, dr) [1]
dot(c24) = cdot(c23, c24, c25, j24, dr, Buf_tot, Km_Buf, D_Ca)
j25 = j(25, r_SR, dr) [1]
dot(c25) = cdot(c24, c25, c26, j25, dr, Buf_tot, Km_Buf, D_Ca)
j26 = j(26, r_SR, dr) [1]
dot(c26) = cdot(c25, c26, c27, j26, dr, Buf_tot, Km_Buf, D_Ca)
j27 = j(27, r_SR, dr) [1]
dot(c27) = cdot(c26, c27, c28, j27, dr, Buf_tot, Km_Buf, D_Ca)
j28 = j(28, r_SR, dr) [1]
dot(c28) = cdot(c27, c28, c29, j28, dr, Buf_tot, Km_Buf, D_Ca)
j29 = j(29, r_SR, dr) [1]
dot(c29) = cdot(c28, c29, c30, j29, dr, Buf_tot, Km_Buf, D_Ca)
j30 = j(30, r_SR, dr) [1]
dot(c30) = cdot(c29, c30, c31, j30, dr, Buf_tot, Km_Buf, D_Ca)
j31 = j(31, r_SR, dr) [1]
dot(c31) = cdot(c30, c31, c32, j31, dr, Buf_tot, Km_Buf, D_Ca)
j32 = j(32, r_SR, dr) [1]
dot(c32) = cdot(c31, c32, c33, j32, dr, Buf_tot, Km_Buf, D_Ca)
j33 = j(33, r_SR, dr) [1]
dot(c33) = cdot(c32, c33, c34, j33, dr, Buf_tot, Km_Buf, D_Ca)
j34 = j(34, r_SR, dr) [1]
dot(c34) = cdot(c33, c34, c35, j34, dr, Buf_tot, Km_Buf, D_Ca)
j35 = j(35, r_SR, dr) [1]
dot(c35) = cdot(c34, c35, c36, j35, dr, Buf_tot, Km_Buf, D_Ca)
j36 = j(36, r_SR, dr) [1]
dot(c36) = cdot(c35, c36, c37, j36, dr, Buf_tot, Km_Buf, D_Ca)
j37 = j(37, r_SR, dr) [1]
dot(c37) = cdot(c36, c37, c38, j37, dr, Buf_tot, Km_Buf, D_Ca)
j38 = j(38, r_SR, dr) [1]
dot(c38) = cdot(c37, c38, c39, j38, dr, Buf_tot, Km_Buf, D_Ca)
j39 = j(39, r_SR, dr) [1]
dot(c39) = cdot(c38, c39, c40, j39, dr, Buf_tot, Km_Buf, D_Ca)
j40 = j(40, r_SR, dr) [1]
dot(c40) = cdot(c39, c40, c41, j40, dr, Buf_tot, Km_Buf, D_Ca)
j41 = j(41, r_SR, dr) [1]
dot(c41) = cdot(c40, c41, c42, j41, dr, Buf_tot, Km_Buf, D_Ca)
j42 = j(42, r_SR, dr) [1]
dot(c42) = cdot(c41, c42, c43, j42, dr, Buf_tot, Km_Buf, D_Ca)
j43 = j(43, r_SR, dr) [1]
dot(c43) = cdot(c42, c43, c44, j43, dr, Buf_tot, Km_Buf, D_Ca)
j44 = j(44, r_SR, dr) [1]
dot(c44) = cdot(c43, c44, c45, j44, dr, Buf_tot, Km_Buf, D_Ca)

# n = a(=45)
j45 = j(45, r_SR, dr) [1]
dot(c45) = beta(c45, Buf_tot, Km_Buf) * ((D_Ca/j45*dr^2) * ((j45+1)*c45 - 2*j45*c45 + (j45-1)*c44) + J_CaSL/V_subSL)

Ca_subSR = c1
    in [uM]
Ca_subSL = c45
    in [uM]
Ca_i = Ca_subSL
    in [uM]
E_Ca = 1 / (2 * FoRT) * log(Ca_o / Ca_i)
    in [mV]
